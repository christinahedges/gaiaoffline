{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#gaiaoffline","title":"GaiaOffline","text":"<p>GaiaOffline is a Python package for building and then querying a copy of the Gaia DR3 catalog locally on your machine, down to a specified magnitude limit. This tool enables you to download the Gaia catalog in subsets, so that you never store the entire catalog on your hard drive (saving space). This tool also manages the download for you, so that if you interrup the download you can begin it again from where you were interrupted. The database is stored in a local SQLite database, enabling you to perform efficient queries without relying on online services.</p> <p>The point of this repository is to enable you to create a local catalog with some flexibility, while keeping the on disk size of the catalog small. This should mean that you can download a version of the Gaia catalog to your local machine, even if you don't have a large hard drive.</p> <p>The total size of the catalog once you have completed the download using the default settings is ~30Gb.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Download Gaia DR3 catalog data as CSV files and convert them to a local SQLite database.</li> <li>Configure stored columns, magnitude limits, and other settings via a persistent config file.</li> <li>Optionally download and store the 2MASS crossmatch.</li> <li>Perform offline queries, including rectangular searches in RA/Dec.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You will follow these basic steps to install this package, detailed here;</p> <ol> <li>Install the package</li> <li>Update the configuration for the package</li> <li>Either download or build the database file.</li> </ol> <p>These instructions are covered in more detail below.</p>"},{"location":"#install-using-pip","title":"Install using pip","text":"<p>You can install this package with pip using</p> <pre><code>pip install gaiaoffline\n</code></pre>"},{"location":"#install-the-package-using-poetry","title":"Install the package using Poetry","text":"<p>Clone the repository:</p> <pre><code>   git clone https://github.com/christinahedges/gaiaoffline.git\n   cd gaiaoffline\n</code></pre> <p>Install dependencies using Poetry:</p> <pre><code>    poetry install\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>GaiaOffline uses a persistent configuration file to manage settings. The configuration file is automatically created at:</p> <ul> <li>macOS: <code>~/Library/Application Support/gaiaoffline/config.ini</code></li> <li>Linux: <code>~/.config/gaiaoffline/config.ini</code></li> <li>Windows: <code>%LOCALAPPDATA%\\gaiaoffline\\config.ini</code></li> </ul> <p>You can use this file to customize the behavior of the package without modifying the code. The config file will be generated on import if you do not have a config file in the expected place. Simply <code>import gaiaoffline</code> within a Python environment to make sure the file is created. If you do already have a config file, this will be used any time <code>gaiaoffline</code> is imported from any environment; i.e. if you have this tool installed in multiple places there is a single shared config file and a single shared database file.</p> <p>The default magnitude limit is 16. This means that the tool will download the catalogs in small chunks, keep only elements that are brighter than 16th magnitude, delete the rest of the data and then move onto the next chunk. This results in a database that is ~30Gb on disk, and you will never require more hard-drive space than that to use the tool. If you increase the magnitude limit the final stored database will be larger.</p>"},{"location":"#key-sections","title":"Key Sections","text":"<ol> <li>SETTINGS</li> <li><code>archive_url</code>: URL to the Gaia DR3 archive for downloading data. Should be a listing of CSV files to download.</li> <li><code>data_dir</code>: Directory where the SQLite database is stored.</li> <li><code>db_name</code>: Name of the database file (default: <code>gaiadr3.db</code>).</li> <li><code>table_name</code>: Name of the database table for Gaia data.</li> <li> <p><code>log_level</code>: Logging level (<code>INFO</code>, <code>DEBUG</code>, etc.).</p> </li> <li> <p>DATABASE</p> </li> <li><code>stored_columns</code>: List of columns to save from the Gaia data. Customize this to store only the data you need, reducing database size. You must store, at minimum, <code>phot_g_mean_flux</code></li> <li><code>zeropoints</code>: Zeropoints for converting fluxes to magnitudes for G, BP, and RP bands. These are set to current best estimates from the Gaia mission.</li> <li><code>magnitude_limit</code>: Faintest magnitude to store in the database. Filters out faint sources during database creation. If you set this limit to a bright magnitude (e.g. 10), when downloading the database any fainter sources will be removed. This will reduce the amount of data stored on disk. If you set no limit, and have all columns, expect the database to be ~3Tb.</li> </ol>"},{"location":"#example-configuration","title":"Example Configuration","text":"<pre><code>[SETTINGS]\ndata_dir = /path/to/database\ndb_name = gaiaoffline.db\nlog_level = INFO\n\n[DATABASE]\nstored_columns = source_id,ra,dec,parallax,pmra,pmdec,radial_velocity,phot_g_mean_flux,phot_bp_mean_flux,phot_rp_mean_flux,teff_gspphot,logg_gspphot,mh_gspphot\nzeropoints = 25.6873668671,25.3385422158,24.7478955012\nmagnitude_limit = 16\n</code></pre>"},{"location":"#modifying-the-configuration","title":"Modifying the Configuration","text":"<p>You can edit the configuration file manually or update it programmatically:</p> <pre><code>from gaiaoffline import config, save_config\nconfig[\"SETTINGS\"][\"log_level\"] = \"DEBUG\"\nsave_config(config)\n</code></pre>"},{"location":"#resetting-the-configuration","title":"Resetting the Configuration","text":"<p>To reset the configuration file to its default values use the following function. Keep in mind this will reset your config file on disk, you must restart your session to have these configurations take effect.</p> <pre><code>from gaiaoffline import reset_config\nreset_config()\n</code></pre>"},{"location":"#managing-the-database","title":"Managing the Database","text":"<p>To add a database to this package, you can either build a new one or obtain an existing one. If you are using the default settings of this repository you can download a precomputed catalog here.</p>"},{"location":"#adding-a-precomputed-database","title":"Adding a precomputed database","text":"<p>If you've recieved a database file from a colleague or downloaded from Zenodo make sure that</p> <ol> <li>Your config files match. All but the <code>data_dir</code> location should match.</li> <li>Your database file is in the <code>data_dir</code> location. You can also find this by running <code>from gaiaoffline import DATABASEPATH</code>. This string will tell you where the file should be.</li> </ol> <p>If you are using the default settings of this repository you can download a precomputed catalog here. This will likely be adequate for the needs of most users.</p>"},{"location":"#creating-the-database-from-scratch","title":"Creating the Database from scratch","text":"<p>If you don't have a copy of the database, you can create one using</p> <pre><code>from gaiaoffline import populate_gaiadr3\npopulate_gaiadr3()\n</code></pre> <p>This will download ~3500 csv files and will take a long time (depending on your internet connection this will take ~days). If you interupt the download for any reason, simply repeat the command and the database will pick up the download from wherever you've left off.</p>"},{"location":"#2mass-crossmatching","title":"2MASS crossmatching","text":"<p>Once the above catalog is complete, you can optionally download the gaia-2MASS cross match. This will do a left join, meaning that it will only keep entries with a matching target in the Gaia DR3 catalog you have downloaded in the step above.</p> <p>You can download the crossmatch database using</p> <pre><code>from gaiaoffline import populate_tmass_xmatch\npopulate_tmass_xmatch()\n</code></pre> <p>Once this is finished you can then download the 2MASS magnitudes that correspond to each cross match using</p> <pre><code>from gaiaoffline import populate_tmass\npopulate_tmass()\n</code></pre> <p>You must complete these steps in order, otherwise your database will be incomplete.</p> <p>Once you have completed this, you can check on the completeness by looking at the repr of the <code>Gaia</code> object.</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia() as gaia:\n   print(gaia)\n</code></pre> <p>This repr should look something like:</p> <pre><code>Offline Gaia Database\n   gaiadr3: 100.0% Populated\n   tmass xmatch: 100.0% Populated\n   tmass: 100.0% Populated\n</code></pre>"},{"location":"#deleting-the-database","title":"Deleting the database","text":"<p>The database can get large, and you may wish to delete it. Remember you can find the database file location in the config file.</p> <pre><code>from gaiaoffline.utils import delete_database\n\n# Remove the database\ndelete_database()\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#querying-the-database","title":"Querying the Database","text":"<p><code>gaiaoffline</code> provides you with an object that you can manage using context, this ensures that the database behind any queries is always closed after your have finished your queries.</p> <p>To perform a cone search around a given RA/Dec use:</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia() as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</code></pre> <p>This should give a result that looks like the following:</p> source_id ra dec parallax pmra 0 7090720423502592 44.509845 5.929635 0.747558 6.432207 1 7097317492675328 44.519449 6.081799 4.258604 5.068064 2 7097317493262720 44.519675 6.081777 NaN NaN 3 7096905176403968 44.525031 6.043208 0.081763 -0.017625 4 7103188712818304 44.526470 6.097983 1.191807 7.503639 <p>Note that the <code>Gaia</code> object sets up a context for us. This is to ensure that the connection to the database is opened and closed properly.</p> <p>You can add a magnitude limit to your conesearch using the following code. This will execute larger searches faster by applying the magnitude limit first.</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia(magnitude_limit=(-3, 10)) as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</code></pre> <p>You can include the 2MASS crossmatch data using</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia(tmass_crossmatch=True) as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</code></pre> <p>The default is to output fluxes in the catalog, but you can switch to magnitudes using</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia(photometry_output='mag') as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</code></pre> <p>If you are doing a large query and want only the top 10 results to test the query, you can use</p> <pre><code>from gaiaoffline import Gaia\nwith Gaia(limit=10) as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</code></pre> <p>Any of the above can be used in combination.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"#changelog","title":"Changelog","text":""},{"location":"#v103","title":"v1.03","text":"<ul> <li>Added config file display function</li> <li>Moved docs and added mkdocs pages</li> </ul>"},{"location":"#v102","title":"v1.0.2","text":"<ul> <li>Updated broken requirements for pip installation</li> <li>Updated installation instructions</li> </ul>"},{"location":"#v101","title":"v1.0.1","text":"<ul> <li>Added check to ensure that the 2MASS data is present if user asks for crossmatch</li> <li>Fixed strings in the 2MASS magnitudes to be floats</li> </ul>"},{"location":"#v100","title":"v1.0.0","text":"<ul> <li>Initial release of <code>gaiaoffline</code></li> </ul>"},{"location":"apidocs/","title":"API Documentation","text":"<p>               Bases: <code>object</code></p> <p>Object to query gaiaoffline database.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.benchmark","title":"<code>benchmark()</code>","text":"<p>Returns the number of seconds a benchmark query takes.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.brightnesslimitsearch","title":"<code>brightnesslimitsearch(magnitude_limit, band='g', filters=None)</code>","text":"<p>Perform a search for all targets down to a given brightness limit.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.brightnesslimitsearch--parameters","title":"Parameters","text":"<p>magnitude_limit : tuple     The range of magnitudes to search</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.brightnesslimitsearch--returns","title":"Returns","text":"<p>df : pd.DataFrame     pandas dataframe of query results</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.close","title":"<code>close()</code>","text":"<p>Closes the database connection.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.conesearch","title":"<code>conesearch(ra, dec, radius)</code>","text":"<p>Perform a search in a radius around an RA, Dec point.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.conesearch--parameters","title":"Parameters","text":"<p>ra : float     Right Ascension of the center in degrees. dec : float     Declination of the center in degrees. radius : float     Angular radius of the search in degrees.</p>"},{"location":"apidocs/#gaiaoffline.gaiaoffline.Gaia.conesearch--returns","title":"Returns","text":"<p>df : pd.DataFrame     pandas dataframe of query results</p>"},{"location":"calibration-target-notebook/","title":"Finding calibration targets for Pandora wavelength solution","text":"In\u00a0[72]: Copied! <pre>from gaiaoffline import Gaia, __version__\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n</pre> from gaiaoffline import Gaia, __version__ import pandas as pd import numpy as np import matplotlib.pyplot as plt <p>To find calibration targets for the wavelength solution we need bright targets in the IR that have a range of effective temperatures. We can use <code>gaiaoffline</code> to find targets that have the right magnitudes and have known effective temperatures.</p> In\u00a0[57]: Copied! <pre>with Gaia(tmass_crossmatch=True, photometry_output='mag') as gaia:\n    df = gaia.brightnesslimitsearch((7, 8), band='j', filters=[\"g.teff_gspphot&gt;3000\", \"g.teff_gspphot&lt;10000\"])\n</pre> with Gaia(tmass_crossmatch=True, photometry_output='mag') as gaia:     df = gaia.brightnesslimitsearch((7, 8), band='j', filters=[\"g.teff_gspphot&gt;3000\", \"g.teff_gspphot&lt;10000\"]) <p>Below we cut out any targets whos SEDs don't closely match the majority of SEDs at that temperature. This should remove a lot of targets that have a lot of extinction.</p> <p>We iteratively build average SEDs across effective temperature bins, calculate the residual between the target SEDs and the average SEDs, and then cut out any targets with large deviations from the average.</p> In\u00a0[79]: Copied! <pre>bins = np.arange(3000, 10500, 250)\nteff = (bins[:-1] + 125)\ndelta_mag = np.zeros(len(df))\nfor count in range(4):\n    seds = []\n    for idx in range(len(bins) - 1):\n        k = (df.teff_gspphot &gt; bins[idx]) &amp; (df.teff_gspphot &lt; bins[idx + 1]) &amp; (delta_mag &lt; 1)\n        df1 = df[k]\n        s = df1[['phot_bp_mean_mag', 'phot_g_mean_mag', 'phot_rp_mean_mag', 'j_m', 'h_m', 'k_m']].values.T - df1.j_m.values\n        seds.append(np.nanmedian(s, axis=1))\n    seds = np.asarray(seds)\n    delta_mag = np.zeros(len(df))\n    for idx, band in zip([0, 1, 2, 4, 5], ['phot_bp_mean_mag', 'phot_g_mean_mag', 'phot_rp_mean_mag', 'h_m', 'k_m']):\n        delta_mag += (df[band].values - (np.interp(df.teff_gspphot.values, teff, seds[:, idx]) + df.j_m.values))**2\n    delta_mag = delta_mag ** 0.5\n</pre> bins = np.arange(3000, 10500, 250) teff = (bins[:-1] + 125) delta_mag = np.zeros(len(df)) for count in range(4):     seds = []     for idx in range(len(bins) - 1):         k = (df.teff_gspphot &gt; bins[idx]) &amp; (df.teff_gspphot &lt; bins[idx + 1]) &amp; (delta_mag &lt; 1)         df1 = df[k]         s = df1[['phot_bp_mean_mag', 'phot_g_mean_mag', 'phot_rp_mean_mag', 'j_m', 'h_m', 'k_m']].values.T - df1.j_m.values         seds.append(np.nanmedian(s, axis=1))     seds = np.asarray(seds)     delta_mag = np.zeros(len(df))     for idx, band in zip([0, 1, 2, 4, 5], ['phot_bp_mean_mag', 'phot_g_mean_mag', 'phot_rp_mean_mag', 'h_m', 'k_m']):         delta_mag += (df[band].values - (np.interp(df.teff_gspphot.values, teff, seds[:, idx]) + df.j_m.values))**2     delta_mag = delta_mag ** 0.5 <pre>/Users/chedges/Library/Caches/pypoetry/virtualenvs/gaiaoffline-dMWJb19h-py3.9/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.py:1231: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/Users/chedges/Library/Caches/pypoetry/virtualenvs/gaiaoffline-dMWJb19h-py3.9/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.py:1231: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/Users/chedges/Library/Caches/pypoetry/virtualenvs/gaiaoffline-dMWJb19h-py3.9/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.py:1231: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n/Users/chedges/Library/Caches/pypoetry/virtualenvs/gaiaoffline-dMWJb19h-py3.9/lib/python3.9/site-packages/numpy/lib/_nanfunctions_impl.py:1231: RuntimeWarning: Mean of empty slice\n  return np.nanmean(a, axis, out=out, keepdims=keepdims)\n</pre> <p>We can then reduce the target list to those targets that have low residuals</p> In\u00a0[86]: Copied! <pre>df1 = df[(delta_mag &lt; 0.5)]\n</pre> df1 = df[(delta_mag &lt; 0.5)] In\u00a0[99]: Copied! <pre>df1.to_csv(\"wavelength_calibration_stars.csv\", index=False)\n</pre> df1.to_csv(\"wavelength_calibration_stars.csv\", index=False) In\u00a0[98]: Copied! <pre>fig, ax = plt.subplots(1, 2, figsize=(12, 4))\nax[0].scatter(df1.ra, df1.dec, s=0.01, c='k')\nax[1].hist(df1.teff_gspphot.values, 100, color='k');\nax[0].set(xlabel=\"RA\", ylabel=\"Dec\", title=\"Calibration Targets\")\nax[1].set(xlabel=\"Effective Temperature\", ylabel=\"Number of Targets\", title=\"Calibration Targets\")\n</pre> fig, ax = plt.subplots(1, 2, figsize=(12, 4)) ax[0].scatter(df1.ra, df1.dec, s=0.01, c='k') ax[1].hist(df1.teff_gspphot.values, 100, color='k'); ax[0].set(xlabel=\"RA\", ylabel=\"Dec\", title=\"Calibration Targets\") ax[1].set(xlabel=\"Effective Temperature\", ylabel=\"Number of Targets\", title=\"Calibration Targets\") Out[98]: <pre>[Text(0.5, 0, 'Effective Temperature'),\n Text(0, 0.5, 'Number of Targets'),\n Text(0.5, 1.0, 'Calibration Targets')]</pre>"},{"location":"calibration-target-notebook/#finding-calibration-targets-for-pandora-wavelength-solution","title":"Finding calibration targets for Pandora wavelength solution\u00b6","text":""},{"location":"notebook-example/","title":"Example usage","text":"In\u00a0[1]: Copied! <pre>from gaiaoffline import Gaia\n</pre> from gaiaoffline import Gaia In\u00a0[2]: Copied! <pre>with Gaia() as gaia:\n    results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5)\n</pre> with Gaia() as gaia:     results = gaia.conesearch(ra=45.0, dec=6.0, radius=0.5) In\u00a0[3]: Copied! <pre>results\n</pre> results Out[3]: source_id ra dec parallax pmra pmdec phot_g_mean_flux phot_bp_mean_flux phot_rp_mean_flux radial_velocity teff_gspphot logg_gspphot mh_gspphot 0 7090720423502592 44.509845 5.929635 0.747558 6.432207 4.551372 16856.086102 8409.319290 12121.273134 NaN 5114.8706 4.2540 -1.3869 1 7097317492675328 44.519449 6.081799 4.258604 5.068064 5.079538 47298.968398 27576.148423 72616.670451 0.469183 NaN NaN NaN 2 7097317493262720 44.519675 6.081777 NaN NaN NaN 34481.298446 NaN NaN 13.451580 NaN NaN NaN 3 7096905176403968 44.525031 6.043208 0.081763 -0.017625 -2.614324 9935.154498 4022.459319 8514.830261 NaN NaN NaN NaN 4 7103188712818304 44.526470 6.097983 1.191807 7.503639 -10.218165 84525.893200 44516.084209 57364.797278 -0.059489 6297.8930 4.0977 -0.4296 ... ... ... ... ... ... ... ... ... ... ... ... ... ... 334 6983380600824704 45.458557 6.067333 4.926242 11.960269 -54.369694 14758.829922 3865.970330 17434.765372 -32.090107 3755.1800 4.7046 -0.0050 335 6969636705444736 45.465496 5.838977 1.581406 0.013144 -11.781949 9672.009624 3936.944406 8186.025904 NaN 4503.5640 4.5307 -0.1269 336 6996918337697024 45.469726 6.172912 1.219428 7.261278 -16.497606 7764.534320 3580.433271 6011.555315 NaN 4794.6987 4.7177 -0.8279 337 6976852250498432 45.493519 5.914465 0.652126 -1.255462 -4.339768 14082.172277 10491.799349 19049.741258 NaN NaN NaN NaN 338 6976852249883520 45.493727 5.914622 NaN NaN NaN 11250.632409 NaN NaN NaN NaN NaN NaN <p>339 rows \u00d7 13 columns</p>"},{"location":"notebook-example/#example-usage","title":"Example usage\u00b6","text":"<p>This notebook shows a quick example of how to use the <code>gaiaoffline</code> package. You should follow the installation instructions for the package that include setting up the offline database.</p>"}]}